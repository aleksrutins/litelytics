// Code generated by ent, DO NOT EDIT.

package visit

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/aleksrutins/litelytics/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPath), v))
	})
}

// Referer applies equality check predicate on the "referer" field. It's identical to RefererEQ.
func Referer(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReferer), v))
	})
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimestamp), v))
	})
}

// IP applies equality check predicate on the "ip" field. It's identical to IPEQ.
func IP(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIP), v))
	})
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPath), v))
	})
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPath), v))
	})
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.Visit {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPath), v...))
	})
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.Visit {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPath), v...))
	})
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPath), v))
	})
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPath), v))
	})
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPath), v))
	})
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPath), v))
	})
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPath), v))
	})
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPath), v))
	})
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPath), v))
	})
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPath), v))
	})
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPath), v))
	})
}

// RefererEQ applies the EQ predicate on the "referer" field.
func RefererEQ(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReferer), v))
	})
}

// RefererNEQ applies the NEQ predicate on the "referer" field.
func RefererNEQ(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReferer), v))
	})
}

// RefererIn applies the In predicate on the "referer" field.
func RefererIn(vs ...string) predicate.Visit {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReferer), v...))
	})
}

// RefererNotIn applies the NotIn predicate on the "referer" field.
func RefererNotIn(vs ...string) predicate.Visit {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReferer), v...))
	})
}

// RefererGT applies the GT predicate on the "referer" field.
func RefererGT(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReferer), v))
	})
}

// RefererGTE applies the GTE predicate on the "referer" field.
func RefererGTE(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReferer), v))
	})
}

// RefererLT applies the LT predicate on the "referer" field.
func RefererLT(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReferer), v))
	})
}

// RefererLTE applies the LTE predicate on the "referer" field.
func RefererLTE(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReferer), v))
	})
}

// RefererContains applies the Contains predicate on the "referer" field.
func RefererContains(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReferer), v))
	})
}

// RefererHasPrefix applies the HasPrefix predicate on the "referer" field.
func RefererHasPrefix(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReferer), v))
	})
}

// RefererHasSuffix applies the HasSuffix predicate on the "referer" field.
func RefererHasSuffix(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReferer), v))
	})
}

// RefererEqualFold applies the EqualFold predicate on the "referer" field.
func RefererEqualFold(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReferer), v))
	})
}

// RefererContainsFold applies the ContainsFold predicate on the "referer" field.
func RefererContainsFold(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReferer), v))
	})
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimestamp), v))
	})
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimestamp), v))
	})
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.Visit {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTimestamp), v...))
	})
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.Visit {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTimestamp), v...))
	})
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTimestamp), v))
	})
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTimestamp), v))
	})
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTimestamp), v))
	})
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTimestamp), v))
	})
}

// IPEQ applies the EQ predicate on the "ip" field.
func IPEQ(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIP), v))
	})
}

// IPNEQ applies the NEQ predicate on the "ip" field.
func IPNEQ(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIP), v))
	})
}

// IPIn applies the In predicate on the "ip" field.
func IPIn(vs ...string) predicate.Visit {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIP), v...))
	})
}

// IPNotIn applies the NotIn predicate on the "ip" field.
func IPNotIn(vs ...string) predicate.Visit {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIP), v...))
	})
}

// IPGT applies the GT predicate on the "ip" field.
func IPGT(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIP), v))
	})
}

// IPGTE applies the GTE predicate on the "ip" field.
func IPGTE(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIP), v))
	})
}

// IPLT applies the LT predicate on the "ip" field.
func IPLT(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIP), v))
	})
}

// IPLTE applies the LTE predicate on the "ip" field.
func IPLTE(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIP), v))
	})
}

// IPContains applies the Contains predicate on the "ip" field.
func IPContains(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIP), v))
	})
}

// IPHasPrefix applies the HasPrefix predicate on the "ip" field.
func IPHasPrefix(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIP), v))
	})
}

// IPHasSuffix applies the HasSuffix predicate on the "ip" field.
func IPHasSuffix(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIP), v))
	})
}

// IPEqualFold applies the EqualFold predicate on the "ip" field.
func IPEqualFold(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIP), v))
	})
}

// IPContainsFold applies the ContainsFold predicate on the "ip" field.
func IPContainsFold(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIP), v))
	})
}

// HasSite applies the HasEdge predicate on the "site" edge.
func HasSite() predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SiteTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SiteTable, SiteColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSiteWith applies the HasEdge predicate on the "site" edge with a given conditions (other predicates).
func HasSiteWith(preds ...predicate.Site) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SiteInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SiteTable, SiteColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Visit) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Visit) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Visit) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		p(s.Not())
	})
}
