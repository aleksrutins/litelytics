// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/aleksrutins/litelytics/ent/migrate"

	"github.com/aleksrutins/litelytics/ent/site"
	"github.com/aleksrutins/litelytics/ent/user"
	"github.com/aleksrutins/litelytics/ent/visit"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Site is the client for interacting with the Site builders.
	Site *SiteClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// Visit is the client for interacting with the Visit builders.
	Visit *VisitClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Site = NewSiteClient(c.config)
	c.User = NewUserClient(c.config)
	c.Visit = NewVisitClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:    ctx,
		config: cfg,
		Site:   NewSiteClient(cfg),
		User:   NewUserClient(cfg),
		Visit:  NewVisitClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:    ctx,
		config: cfg,
		Site:   NewSiteClient(cfg),
		User:   NewUserClient(cfg),
		Visit:  NewVisitClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Site.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Site.Use(hooks...)
	c.User.Use(hooks...)
	c.Visit.Use(hooks...)
}

// SiteClient is a client for the Site schema.
type SiteClient struct {
	config
}

// NewSiteClient returns a client for the Site from the given config.
func NewSiteClient(c config) *SiteClient {
	return &SiteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `site.Hooks(f(g(h())))`.
func (c *SiteClient) Use(hooks ...Hook) {
	c.hooks.Site = append(c.hooks.Site, hooks...)
}

// Create returns a builder for creating a Site entity.
func (c *SiteClient) Create() *SiteCreate {
	mutation := newSiteMutation(c.config, OpCreate)
	return &SiteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Site entities.
func (c *SiteClient) CreateBulk(builders ...*SiteCreate) *SiteCreateBulk {
	return &SiteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Site.
func (c *SiteClient) Update() *SiteUpdate {
	mutation := newSiteMutation(c.config, OpUpdate)
	return &SiteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SiteClient) UpdateOne(s *Site) *SiteUpdateOne {
	mutation := newSiteMutation(c.config, OpUpdateOne, withSite(s))
	return &SiteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SiteClient) UpdateOneID(id int) *SiteUpdateOne {
	mutation := newSiteMutation(c.config, OpUpdateOne, withSiteID(id))
	return &SiteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Site.
func (c *SiteClient) Delete() *SiteDelete {
	mutation := newSiteMutation(c.config, OpDelete)
	return &SiteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SiteClient) DeleteOne(s *Site) *SiteDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SiteClient) DeleteOneID(id int) *SiteDeleteOne {
	builder := c.Delete().Where(site.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SiteDeleteOne{builder}
}

// Query returns a query builder for Site.
func (c *SiteClient) Query() *SiteQuery {
	return &SiteQuery{
		config: c.config,
	}
}

// Get returns a Site entity by its id.
func (c *SiteClient) Get(ctx context.Context, id int) (*Site, error) {
	return c.Query().Where(site.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SiteClient) GetX(ctx context.Context, id int) *Site {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a Site.
func (c *SiteClient) QueryUsers(s *Site) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(site.Table, site.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, site.UsersTable, site.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVisits queries the visits edge of a Site.
func (c *SiteClient) QueryVisits(s *Site) *VisitQuery {
	query := &VisitQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(site.Table, site.FieldID, id),
			sqlgraph.To(visit.Table, visit.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, site.VisitsTable, site.VisitsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SiteClient) Hooks() []Hook {
	return c.hooks.Site
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySites queries the sites edge of a User.
func (c *UserClient) QuerySites(u *User) *SiteQuery {
	query := &SiteQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(site.Table, site.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.SitesTable, user.SitesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// VisitClient is a client for the Visit schema.
type VisitClient struct {
	config
}

// NewVisitClient returns a client for the Visit from the given config.
func NewVisitClient(c config) *VisitClient {
	return &VisitClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `visit.Hooks(f(g(h())))`.
func (c *VisitClient) Use(hooks ...Hook) {
	c.hooks.Visit = append(c.hooks.Visit, hooks...)
}

// Create returns a builder for creating a Visit entity.
func (c *VisitClient) Create() *VisitCreate {
	mutation := newVisitMutation(c.config, OpCreate)
	return &VisitCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Visit entities.
func (c *VisitClient) CreateBulk(builders ...*VisitCreate) *VisitCreateBulk {
	return &VisitCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Visit.
func (c *VisitClient) Update() *VisitUpdate {
	mutation := newVisitMutation(c.config, OpUpdate)
	return &VisitUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VisitClient) UpdateOne(v *Visit) *VisitUpdateOne {
	mutation := newVisitMutation(c.config, OpUpdateOne, withVisit(v))
	return &VisitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VisitClient) UpdateOneID(id int) *VisitUpdateOne {
	mutation := newVisitMutation(c.config, OpUpdateOne, withVisitID(id))
	return &VisitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Visit.
func (c *VisitClient) Delete() *VisitDelete {
	mutation := newVisitMutation(c.config, OpDelete)
	return &VisitDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VisitClient) DeleteOne(v *Visit) *VisitDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VisitClient) DeleteOneID(id int) *VisitDeleteOne {
	builder := c.Delete().Where(visit.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VisitDeleteOne{builder}
}

// Query returns a query builder for Visit.
func (c *VisitClient) Query() *VisitQuery {
	return &VisitQuery{
		config: c.config,
	}
}

// Get returns a Visit entity by its id.
func (c *VisitClient) Get(ctx context.Context, id int) (*Visit, error) {
	return c.Query().Where(visit.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VisitClient) GetX(ctx context.Context, id int) *Visit {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySite queries the site edge of a Visit.
func (c *VisitClient) QuerySite(v *Visit) *SiteQuery {
	query := &SiteQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(visit.Table, visit.FieldID, id),
			sqlgraph.To(site.Table, site.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, visit.SiteTable, visit.SiteColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VisitClient) Hooks() []Hook {
	return c.hooks.Visit
}
