// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/aleksrutins/litelytics/ent/site"
)

// Site is the model entity for the Site schema.
type Site struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Domain holds the value of the "domain" field.
	Domain string `json:"domain,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SiteQuery when eager-loading is set.
	Edges SiteEdges `json:"edges"`
}

// SiteEdges holds the relations/edges for other nodes in the graph.
type SiteEdges struct {
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// Visits holds the value of the visits edge.
	Visits []*Visit `json:"visits,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e SiteEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// VisitsOrErr returns the Visits value or an error if the edge
// was not loaded in eager-loading.
func (e SiteEdges) VisitsOrErr() ([]*Visit, error) {
	if e.loadedTypes[1] {
		return e.Visits, nil
	}
	return nil, &NotLoadedError{edge: "visits"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Site) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case site.FieldID:
			values[i] = new(sql.NullInt64)
		case site.FieldDomain:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Site", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Site fields.
func (s *Site) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case site.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case site.FieldDomain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain", values[i])
			} else if value.Valid {
				s.Domain = value.String
			}
		}
	}
	return nil
}

// QueryUsers queries the "users" edge of the Site entity.
func (s *Site) QueryUsers() *UserQuery {
	return (&SiteClient{config: s.config}).QueryUsers(s)
}

// QueryVisits queries the "visits" edge of the Site entity.
func (s *Site) QueryVisits() *VisitQuery {
	return (&SiteClient{config: s.config}).QueryVisits(s)
}

// Update returns a builder for updating this Site.
// Note that you need to call Site.Unwrap() before calling this method if this Site
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Site) Update() *SiteUpdateOne {
	return (&SiteClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Site entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Site) Unwrap() *Site {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Site is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Site) String() string {
	var builder strings.Builder
	builder.WriteString("Site(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("domain=")
	builder.WriteString(s.Domain)
	builder.WriteByte(')')
	return builder.String()
}

// Sites is a parsable slice of Site.
type Sites []*Site

func (s Sites) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
