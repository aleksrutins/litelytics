// Code generated by ent, DO NOT EDIT.

package site

const (
	// Label holds the string label denoting the site type in the database.
	Label = "site"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDomain holds the string denoting the domain field in the database.
	FieldDomain = "domain"
	// FieldFavicon holds the string denoting the favicon field in the database.
	FieldFavicon = "favicon"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeVisits holds the string denoting the visits edge name in mutations.
	EdgeVisits = "visits"
	// Table holds the table name of the site in the database.
	Table = "sites"
	// UsersTable is the table that holds the users relation/edge. The primary key declared below.
	UsersTable = "user_sites"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// VisitsTable is the table that holds the visits relation/edge.
	VisitsTable = "visits"
	// VisitsInverseTable is the table name for the Visit entity.
	// It exists in this package in order to avoid circular dependency with the "visit" package.
	VisitsInverseTable = "visits"
	// VisitsColumn is the table column denoting the visits relation/edge.
	VisitsColumn = "site_visits"
)

// Columns holds all SQL columns for site fields.
var Columns = []string{
	FieldID,
	FieldDomain,
	FieldFavicon,
}

var (
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"user_id", "site_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
